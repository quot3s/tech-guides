package com.guides.content

import com.guides.NavigationState

object WiresharkContentProvider: ContentProvider {
    override fun getWelcomeMessage(): String = """
üîç Welcome to the Wireshark Ref. Guide! üîç

This interactive tutorial will guide you through essential Wireshark concepts,
from capturing packets to analyzing complex network traffic.

üìñ What you'll learn:

‚Ä¢ Basic Topics: Installation, capturing packets, basic filters
‚Ä¢ Intermediate Topics: Display filters, protocol analysis, statistics
‚Ä¢ Advanced Topics: Custom filters, decryption, scripting

üéØ How to navigate:

‚Ä¢ Use the sidebar menu to select a topic category
‚Ä¢ Click or tap to navigate through menus and subtopics
‚Ä¢ Use the back button (‚Üê Back) to return to previous menus

üöÄ Getting Started:

Choose a topic category from the sidebar to explore subtopics and start learning!
Each section includes explanations, examples, and best practices.

Good luck on your Wireshark journey! üéì
    """.trimIndent()

    override fun getMenuContent(state: NavigationState): String {
        return when (state) {
            NavigationState.MAIN_MENU -> """
üìö Wireshark Ref. Guide

Select a category to begin:

üìñ Basic Topics
Learn essential Wireshark fundamentals.

‚ö° Intermediate Topics
Master packet analysis.

üöÄ Advanced Topics
Dive into expert-level features.

‚ùå Exit
Close the application.
            """.trimIndent()
            NavigationState.BASIC_SUBMENU -> """
üì∞ Basic Topics Menu

Select a subtopic to begin learning:

üõ†Ô∏è Installation & Setup
Installing Wireshark and dependencies.

üì° Packet Capture
Starting and stopping captures.

üîç Basic Filters
Applying simple capture filters.

üìä Interface Overview
Understanding the UI.
            """.trimIndent()
            NavigationState.INTERMEDIATE_SUBMENU -> """
‚ö° Intermediate Topics Menu

Select a subtopic to advance your Wireshark skills:

üö™ Display Filters
Filtering displayed packets.

üñ•Ô∏è Protocol Analysis
Analyzing common protocols.

üìà Statistics
Using Wireshark statistics tools.

üîé Follow Streams
Tracking conversations.
            """.trimIndent()
            NavigationState.ADVANCED_SUBMENU -> """
üöÄ Advanced Topics Menu

Select a subtopic for expert-level Wireshark knowledge:

üìú Custom Filters
Creating complex filters.

üîê Decryption
Decrypting SSL/TLS traffic.

üõ†Ô∏è Lua Scripting
Automating tasks with Lua.

üîç Packet Injection
Injecting packets for testing.
            """.trimIndent()
        }
    }

    override fun getTopicContent(level: String, id: String): String {
        return when (level) {
            "basics" -> when (id) {
                "install" -> """
üõ†Ô∏è Installation & Setup - Getting Started with Wireshark

Essential steps for installing Wireshark:

üì• Linux Installation:
‚Ä¢ sudo apt install wireshark - Ubuntu/Debian
‚Ä¢ sudo dnf install wireshark - Fedora
‚Ä¢ sudo yum install wireshark - CentOS/RHEL

üì• Windows/macOS:
‚Ä¢ Download from wireshark.org
‚Ä¢ Install with Npcap (Windows)
‚Ä¢ Use Homebrew: brew install wireshark (macOS)

üîß Permissions:
‚Ä¢ Add user to wireshark group: sudo usermod -aG wireshark $\USER
‚Ä¢ Configure dumpcap permissions

‚ö†Ô∏è Safety Tips:
‚Ä¢ Install from official sources
‚Ä¢ Run as non-root when possible

üí° Pro Tips:
‚Ä¢ Update Npcap for Windows
‚Ä¢ Use tshark for CLI captures

[Interactive exercises coming soon!]

Press Escape to return to Basic Topics menu.
                """.trimIndent()
                "capture" -> """
üì° Packet Capture - Starting Captures

Capturing network traffic:

üîç Start Capture:
‚Ä¢ Select interface in Wireshark UI
‚Ä¢ Capture > Start or Ctrl+E
‚Ä¢ Specify capture filter (optional)

üõë Stop Capture:
‚Ä¢ Capture > Stop or Ctrl+E
‚Ä¢ Save to .pcap file

üìú Capture Options:
‚Ä¢ Capture all interfaces
‚Ä¢ Limit capture size/time

‚ö†Ô∏è Safety Tips:
‚Ä¢ Capture on authorized networks
‚Ä¢ Secure .pcap files

üí° Pro Tips:
‚Ä¢ Use ring buffer for long captures
‚Ä¢ Save frequently

[Interactive exercises coming soon!]

Press Escape to return to Basic Topics menu.
                """.trimIndent()
                "filters" -> """
üîç Basic Filters - Capture Filters

Applying simple capture filters:

üîß Syntax:
‚Ä¢ host 192.168.1.1 - Capture by IP
‚Ä¢ port 80 - Capture by port
‚Ä¢ tcp - Capture TCP traffic

üìú Examples:
‚Ä¢ src host 10.0.0.1 - Source IP
‚Ä¢ dst port 443 - Destination port
‚Ä¢ not arp - Exclude ARP traffic

‚ö†Ô∏è Safety Tips:
‚Ä¢ Test filters on test networks
‚Ä¢ Avoid capturing sensitive data

üí° Pro Tips:
‚Ä¢ Save filters for reuse
‚Ä¢ Use tshark for CLI filtering

[Interactive exercises coming soon!]

Press Escape to return to Basic Topics menu.
                """.trimIndent()
                "interface" -> """
üìä Interface Overview - Understanding the UI

Navigating Wireshark's interface:

üîç Packet List:
‚Ä¢ Displays captured packets
‚Ä¢ Columns: Time, Source, Destination, Protocol

üìú Packet Details:
‚Ä¢ Expand protocols for details
‚Ä¢ Right-click for options

üõ°Ô∏è Packet Bytes:
‚Ä¢ Hex and ASCII view
‚Ä¢ Select bytes for analysis

‚ö†Ô∏è Safety Tips:
‚Ä¢ Protect sensitive packet data
‚Ä¢ Clear history regularly

üí° Pro Tips:
‚Ä¢ Customize column layout
‚Ä¢ Use color rules for clarity

[Interactive exercises coming soon!]

Press Escape to return to Basic Topics menu.
                """.trimIndent()
                else -> "Content for $level-$id coming soon!"
            }
            "intermediate" -> when (id) {
                "display" -> """
üö™ Display Filters - Filtering Packets

Filtering displayed packets:

üîç Syntax:
‚Ä¢ ip.addr == 192.168.1.1 - Filter by IP
‚Ä¢ tcp.port == 80 - Filter by port
‚Ä¢ http.request - HTTP requests only

üìú Examples:
‚Ä¢ ip.src == 10.0.0.1 - Source IP
‚Ä¢ tcp.flags.syn == 1 - SYN packets
‚Ä¢ !icmp - Exclude ICMP traffic

üõ°Ô∏è Combining:
‚Ä¢ ip.addr == 192.168.1.1 && tcp.port == 80

‚ö†Ô∏è Safety Tips:
‚Ä¢ Verify filters for accuracy
‚Ä¢ Avoid exposing sensitive data

üí° Pro Tips:
‚Ä¢ Save filters for reuse
‚Ä¢ Use autocomplete for fields

[Interactive exercises coming soon!]

Press Escape to return to Intermediate Topics menu.
                """.trimIndent()
                "protocol" -> """
üñ•Ô∏è Protocol Analysis - Deep Packet Inspection

Analyzing common protocols:

üîç HTTP:
‚Ä¢ Filter: http
‚Ä¢ Follow > HTTP Stream
‚Ä¢ Inspect headers, payloads

üìú TCP:
‚Ä¢ Filter: tcp
‚Ä¢ Analyze sequence numbers
‚Ä¢ Check for retransmissions

üõ°Ô∏è DNS:
‚Ä¢ Filter: dns
‚Ä¢ Inspect queries/responses

‚ö†Ô∏è Safety Tips:
‚Ä¢ Handle sensitive data carefully
‚Ä¢ Log findings securely

üí° Pro Tips:
‚Ä¢ Use Statistics > Protocol Hierarchy
‚Ä¢ Export objects for HTTP

[Interactive exercises coming soon!]

Press Escape to return to Intermediate Topics menu.
                """.trimIndent()
                "stats" -> """
üìà Statistics - Network Insights

Using Wireshark statistics:

üîç Protocol Hierarchy:
‚Ä¢ Statistics > Protocol Hierarchy
‚Ä¢ View protocol distribution

üìú Conversations:
‚Ä¢ Statistics > Conversations
‚Ä¢ Track IP/port conversations

üõ°Ô∏è IO Graphs:
‚Ä¢ Statistics > IO Graphs
‚Ä¢ Visualize packet rates

‚ö†Ô∏è Safety Tips:
‚Ä¢ Analyze in test environments
‚Ä¢ Secure exported stats

üí° Pro Tips:
‚Ä¢ Export stats to CSV
‚Ä¢ Customize graph filters

[Interactive exercises coming soon!]

Press Escape to return to Intermediate Topics menu.
                """.trimIndent()
                "streams" -> """
üîé Follow Streams - Tracking Conversations

Following protocol streams:

üîç TCP Stream:
‚Ä¢ Right-click packet > Follow > TCP Stream
‚Ä¢ View full conversation

üìú HTTP Stream:
‚Ä¢ Follow > HTTP Stream
‚Ä¢ See request/response pairs

üõ°Ô∏è UDP Stream:
‚Ä¢ Follow > UDP Stream
‚Ä¢ Useful for DNS, VoIP

‚ö†Ô∏è Safety Tips:
‚Ä¢ Avoid saving sensitive streams
‚Ä¢ Clear stream data post-analysis

üí° Pro Tips:
‚Ä¢ Save streams to file
‚Ä¢ Use filters before following

[Interactive exercises coming soon!]

Press Escape to return to Intermediate Topics menu.
                """.trimIndent()
                else -> "Content for $level-$id coming soon!"
            }
            "advanced" -> when (id) {
                "filters" -> """
üìú Custom Filters - Complex Filtering

Creating advanced display filters:

üîç Boolean Logic:
‚Ä¢ (ip.src == 10.0.0.1) && (tcp.port == 80)
‚Ä¢ http.request.method == "POST"

üìú Field Matching:
‚Ä¢ tcp.analysis.retransmission
‚Ä¢ http.cookie contains "session"

üõ°Ô∏è Regex:
‚Ä¢ http.host matches "example\.com"
‚Ä¢ frame contains "login"

‚ö†Ô∏è Safety Tips:
‚Ä¢ Test filters in sandbox
‚Ä¢ Avoid over-filtering

üí° Pro Tips:
‚Ä¢ Save complex filters
‚Ä¢ Use tshark for automation

[Interactive exercises coming soon!]

Press Escape to return to Advanced Topics menu.
                """.trimIndent()
                "decrypt" -> """
üîê Decryption - SSL/TLS Analysis

Decrypting encrypted traffic:

üîç SSL/TLS Decryption:
‚Ä¢ Edit > Preferences > Protocols > TLS
‚Ä¢ Add RSA key or pre-master secret
‚Ä¢ Use sslkeylogfile

üìú Configuration:
‚Ä¢ Set SSLKEYLOGFILE environment variable
‚Ä¢ Export from browser for testing

üõ°Ô∏è Verification:
‚Ä¢ Filter: tls
‚Ä¢ Check handshake packets

‚ö†Ô∏è Safety Tips:
‚Ä¢ Use only on authorized traffic
‚Ä¢ Secure key files

üí° Pro Tips:
‚Ä¢ Use Wireshark profiles
‚Ä¢ Log keys for debugging

[Interactive exercises coming soon!]

Press Escape to return to Advanced Topics menu.
                """.trimIndent()
                "scripting" -> """
üõ†Ô∏è Lua Scripting - Automating Wireshark

Using Lua for automation:

üîç Lua Basics:
‚Ä¢ Create .lua script in plugins folder
‚Ä¢ Register dissectors or listeners
‚Ä¢ tap.packet(pinfo, tvb) - Packet tap

üìú Examples:
‚Ä¢ Count HTTP requests
‚Ä¢ Extract specific fields

üõ°Ô∏è Loading:
‚Ä¢ Tools > Lua > Evaluate
‚Ä¢ Add to init.lua for auto-loading

‚ö†Ô∏è Safety Tips:
‚Ä¢ Test scripts locally
‚Ä¢ Avoid untrusted scripts

üí° Pro Tips:
‚Ä¢ Use Wireshark Lua API docs
‚Ä¢ Debug with print()

[Interactive exercises coming soon!]

Press Escape to return to Advanced Topics menu.
                """.trimIndent()
                "injection" -> """
üîç Packet Injection - Testing Networks

Injecting packets for testing:

üîç Tools:
‚Ä¢ Use tcpreplay: tcpreplay -i eth0 file.pcap
‚Ä¢ Edit packets with Wireshark Editcap

üìú Modification:
‚Ä¢ editcap --chop file.pcap out.pcap
‚Ä¢ mergecap -w out.pcap file1.pcap file2.pcap

üõ°Ô∏è Testing:
‚Ä¢ Replay on test network
‚Ä¢ Verify with Wireshark

‚ö†Ô∏è Safety Tips:
‚Ä¢ Authorized networks only
‚Ä¢ Log all injections

üí° Pro Tips:
‚Ä¢ Use tcprewrite for packet edits
‚Ä¢ Combine with filters

[Interactive exercises coming soon!]

Press Escape to return to Advanced Topics menu.
                """.trimIndent()
                else -> "Content for $level-$id coming soon!"
            }
            else -> "Content for $level-$id coming soon!"
        }
    }
}